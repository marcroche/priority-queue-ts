


## API

### PriorityQueue()

Initializes a new empty `PriorityQueue` wich uses `.DEFAULT_COMPARATOR()` as
the comparator function for its elements.

### PriorityQueue(comparator)

Initializes a new empty `PriorityQueue` with uses the given `comparator(a, b)`
function as the comparator for its elements.

The comparator function must return a positive number when `a > b`, 0 when
`a == b` and a negative number when `a < b`.

### PriorityQueue.DEFAULT_COMPARATOR(a, b)

Compares two `Number` or `String` objects.

### PriorityQueue#deq()

Dequeues the top element of the priority queue.
Throws an `Error` when the queue is empty.

### PriorityQueue#enq(element)

Enqueues the `element` at the priority queue and returns its new size.

### PriorityQueue#forEach(fn)

Executes `fn` on each element. Just be careful to not modify the priorities,
since the queue won't reorder itself.

### PriorityQueue#isEmpty()

Returns whether the priority queue is empty or not.

### PriorityQueue#peek()

Peeks at the top element of the priority queue.
Throws an `Error` when the queue is empty.

### PriorityQueue#size()

Returns the size of the priority queue.

## Testing

As component in the browser, open test/test.html in your browser:

```
$ make
$ open test/test.html
```

As npm package:

```
$ npm test
```